@* UserSlots.cshtml *@
@page
@model Web.Pages.UserSlotsModel

<div class="container">
    <h2>Available Slots</h2>

    <!-- Search Box for User -->
    <div class="form-group">
        <label for="search">Search Slots</label>
        <input type="text" id="search" class="form-control" placeholder="Search for a slot..." onkeyup="filterSlots()" />
    </div>

    <!-- List of Available Slots -->
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>Slot ID</th>
                <th>Locality</th>
                <th>Name</th>
                <th>Latest Price</th>
                <th>Is Booked</th>
                <th>Operation</th>
            </tr>
        </thead>
        <tbody id="slotTableBody">
            @if (Model.Slots?.Any() ?? false)
            {
                @foreach (var item in Model.Slots)
                {
                    <tr>
                        <td>@item.SlotId</td>
                        <td>@item.Locality</td>
                        <td>@item.Name</td>
                        <td>@item.LatestPrice</td>
                        <td>@item.IsBooked ?</td>
                        <td>
                            <a asp-page="/Payment" asp-route-slotId="@item.SlotId"
                               class="btn btn-sm @(item.IsBooked ? "btn-warning" : "btn-primary")">
                                Payment
                            </a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center">No slots available.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    // Filters the slots table based on search input
    function filterSlots() {
        const searchInput = document.getElementById("search").value.toLowerCase().trim();
        const rows = document.querySelectorAll("#slotTableBody tr");

        rows.forEach(row => {
            const slotId = row.querySelector("td:nth-child(1)")?.textContent.toLowerCase() || "";
            const locality = row.querySelector("td:nth-child(2)")?.textContent.toLowerCase() || "";
            const name = row.querySelector("td:nth-child(3)")?.textContent.toLowerCase() || "";
            const latestPrice = row.querySelector("td:nth-child(4)")?.textContent.toLowerCase() || "";

            // Check if the row matches the search input
            const isMatch =
                slotId.includes(searchInput) ||
                locality.includes(searchInput) ||
                name.includes(searchInput) ||
                latestPrice.includes(searchInput);

            // Show or hide the row based on the match
            row.style.display = isMatch ? "" : "none";

            // Highlight matched text in the visible rows
            if (isMatch && searchInput) {
                highlightText(row, searchInput);
            } else {
                clearHighlight(row);
            }
        });
    }

    // Highlights the matching text in a row
    function highlightText(row, searchInput) {
        const cells = row.querySelectorAll("td");
        cells.forEach(cell => {
            const originalText = cell.textContent || "";
            const regex = new RegExp(`(${searchInput})`, "gi");
            cell.innerHTML = originalText.replace(regex, '<span style="background-color: yellow;">$1</span>');
        });
    }

    // Clears any highlights in a row
    function clearHighlight(row) {
        const cells = row.querySelectorAll("td");
        cells.forEach(cell => {
            cell.innerHTML = cell.textContent; // Reset to original text
        });
    }
</script>
