@* Slot.cshtml *@
@page
@model Web.Pages.SlotModel


<h2>Available Slots</h2>

<!-- Form to Add a New Slot -->
<h3>Add New Slot</h3>
<form method="post">
    <div class="form-group">
        <label for="Slot Id">Slot Id</label>
        <input type="number" id="Slot Id" asp-for="Slot.SlotId" class="form-control" required />
        <span asp-validation-for="Slot.SlotId" class="text-danger"></span>
     </div>
        <div class="form-group">
            <label for="Locality">Locality</label>
            <select id="Locality" asp-for="Slot.Locality" class="form-control" required>
                <option value="" disabled selected>Select a locality</option>
                <option value="Gulshan Area">Gulshan Area</option>
                <option value="Dhanmondi">Dhanmondi</option>
                <option value="Mirpur">Mirpur</option>
                <option value="Badda">Badda</option>
                <option value="Motijheel">Motijheel</option>
                <option value="Banani">Banani</option>
            </select>
            <span asp-validation-for="Slot.Locality" class="text-danger"></span>
        </div>
    <div class="form-group">
        <label for="Name">Name</label>
        <input type="text" id="Name" asp-for="Slot.Name" class="form-control" required />
        <span asp-validation-for="Slot.Name" class="text-danger"></span>
    </div>
        <div class="form-group">
            <label for="LatestPrice">LatestPrice</label>
            <input type="number" id="Latest Price" asp-for="Slot.LatestPrice" class="form-control" required />
            <span asp-validation-for="Slot.LatestPrice" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="IsBooked">Is Booked Slot?</label>
            <input type="checkbox" id="IsBooked" asp-for="Slot.IsBooked" class="form-check-input" />
            <span asp-validation-for="Slot.IsBooked" class="text-danger"></span>
        </div>
        <button type="submit" class="btn btn-success">Save</button>
</form>

<hr />



<!-- List of Available Slots -->
<h2>Available Slots</h2>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Slot Id</th>
            <th>Locality</th>
            <th>Name</th>
            <th>Latest Price</th>
            <th>Operation</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Slots?.Any() ?? false)
        {
            @foreach (var item in Model.Slots)
            {
                <tr>
                    <td>@item.SlotId</td>
                    <td>@item.Locality</td>
                    <td>@item.Name</td>
                    <td>@item.LatestPrice</td>
                    <td>@item.IsBooked ?</td>
                    <td>
                        <a asp-page="/EditSlot" asp-route-id="@item.SlotId" class="btn btn-primary">Edit</a>
                        <form method="post" asp-page-handler="Delete" asp-route-id="@item.SlotId" style="display:inline;">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No slots available.</td>
            </tr>
        }
    </tbody>

</table>

<script>
    // Filters the slots table based on search input
    function filterSlots() {
        const searchInput = document.getElementById("search").value.toLowerCase().trim();
        const rows = document.querySelectorAll("#slotTableBody tr");

        rows.forEach(row => {
            const slotId = row.querySelector("td:nth-child(1)")?.textContent.toLowerCase() || "";
            const locality = row.querySelector("td:nth-child(2)")?.textContent.toLowerCase() || "";
            const name = row.querySelector("td:nth-child(3)")?.textContent.toLowerCase() || "";
            const latestPrice = row.querySelector("td:nth-child(4)")?.textContent.toLowerCase() || "";

            // Check if the row matches the search input
            const isMatch =
                slotId.includes(searchInput) ||
                locality.includes(searchInput) ||
                name.includes(searchInput) ||
                latestPrice.includes(searchInput);

            // Show or hide the row based on the match
            row.style.display = isMatch ? "" : "none";

            // Highlight matched text in the visible rows
            if (isMatch && searchInput) {
                highlightText(row, searchInput);
            } else {
                clearHighlight(row);
            }
        });
    }

    // Highlights the matching text in a row
    function highlightText(row, searchInput) {
        const cells = row.querySelectorAll("td");
        cells.forEach(cell => {
            const originalText = cell.textContent || "";
            const regex = new RegExp(`(${searchInput})`, "gi");
            cell.innerHTML = originalText.replace(regex, '<span style="background-color: yellow;">$1</span>');
        });
    }

    // Clears any highlights in a row
    function clearHighlight(row) {
        const cells = row.querySelectorAll("td");
        cells.forEach(cell => {
            cell.innerHTML = cell.textContent; // Reset to original text
        });
    }
</script>
